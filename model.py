# model which trains on the labelled data from the roc_scores.py file for fingerprint recognition

import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.model_selection import train_test_split
import numpy as np
from load_save import *
import random
# Assuming labelled_pairs = [(feature_vec1, feature_vec2, label), ...]

SEED = 42
torch.manual_seed(SEED)
np.random.seed(SEED)
random.seed(SEED)
labelled_pairs = load_users_dictionary('labeled_pairs.pkl',True)

def prepare_dataset(labeled_pairs):
    X = []
    y = []
    count=0
    #for elements in labeled_pairs:
    #    print(len(elements))
    for [fv1, fv2, label] in labeled_pairs:
        # Combine the two feature vectors for a pair into one input vector
        # Here simple concatenation is used, but you may use difference, absolute difference or other features
        arr1 = np.array(fv1)    
        arr2 = np.array(fv2)
        pooled1 = arr1.mean(axis=0)
        pooled2 = arr2.mean(axis=0)
        combined_vector = np.concatenate((pooled1,pooled2))
        #print(count)

        X.append(combined_vector)
        y.append(label)
        count+=1
    
    return np.array(X), np.array(y)

# Use your labelled_pairs generated by MinutiaeROCAnalyzer
X, y = prepare_dataset(labelled_pairs)
#print(X)
#print(y)
# Split into train and validation sets

X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

print("Validation set class distribution:", np.bincount(y_val.astype(int)))

#Convert to PyTorch tensors
X_train = torch.tensor(X_train, dtype=torch.float32)
X_val = torch.tensor(X_val, dtype=torch.float32)
y_train = torch.tensor(y_train, dtype=torch.float32)
y_val = torch.tensor(y_val, dtype=torch.float32)

# Define input dimension for the neural network based on concatenated feature size
input_dim = X_train.shape[1]

# Neural network model definition remains the same
class FingerprintMatcher(nn.Module):
    def __init__(self, input_dim):
        super(FingerprintMatcher, self).__init__()
        self.model = nn.Sequential(
            nn.Linear(input_dim, 64),
            nn.ReLU(),
            nn.Dropout(0.5),    
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 1),
            nn.Sigmoid()
        )
    def forward(self, x):
        return self.model(x)

# Instantiate model, criterion and optimizer
model = FingerprintMatcher(input_dim=input_dim)
criterion = torch.nn.BCELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.0001, weight_decay=1e-4)

# Training loop
epochs = 10000
for epoch in range(epochs):
    model.train()
    optimizer.zero_grad()
    outputs = model(X_train).view(-1)
    loss = criterion(outputs, y_train)
    loss.backward()
    optimizer.step()

    if (epoch + 1) % 10 == 0:
        model.eval()
        with torch.no_grad():
            val_outputs = model(X_val).view(-1)
            val_loss = criterion(val_outputs, y_val)
        print(f"Epoch {epoch + 1}, Train Loss: {loss.item():.4f}, Val Loss: {val_loss.item():.4f}")


# After training loop
model.eval()
with torch.no_grad():
    y_pred_prob = model(X_val).view(-1).numpy()

from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt

fpr, tpr, thresholds = roc_curve(y_val.numpy(), y_pred_prob, pos_label=1)
roc_auc = roc_auc_score(y_val.numpy(), y_pred_prob)
print("ROC AUC:", roc_auc)

plt.figure()
plt.plot(fpr, tpr, label='ROC curve (AUC = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], 'k--', label='Random classifier')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc="lower right")
plt.show()
